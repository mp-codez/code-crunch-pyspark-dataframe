from fastapi import FastAPI, Header, HTTPException, Depends, File, UploadFile
from fastapi.responses import StreamingResponse
import jwt
import datetime
import boto3

# ---------------- Config ----------------
SECRET_KEY = "YOUR_VERY_SECRET_KEY"
JWT_ALGORITHM = "HS256"
OZONE_BUCKET = "documents"

# Initialize Ozone S3 client
ozone_s3 = boto3.client(
    "s3",
    endpoint_url="http://ozone-s3-gateway:9878",
    aws_access_key_id="S3_ACCESS_KEY",
    aws_secret_access_key="S3_SECRET_KEY"
)

app = FastAPI(title="Ozone API with JWT for Teams")

# ---------------- JWT Auth Dependency ----------------
def verify_jwt(token: str = Header(..., alias="Authorization")):
    """
    Expects header: Authorization: Bearer <token>
    """
    if not token.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Invalid auth header")
    token = token[len("Bearer "):].strip()
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[JWT_ALGORITHM])
        return payload  # returns decoded claims (team info)
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid token")

# ---------------- Create Token for Team ----------------
@app.post("/generate-token/{team}")
def generate_token(team: str):
    payload = {
        "team": team,
        "exp": datetime.datetime.utcnow() + datetime.timedelta(days=30)
    }
    token = jwt.encode(payload, SECRET_KEY, algorithm=JWT_ALGORITHM)
    return {"team": team, "token": token}

# ---------------- Upload File ----------------
@app.post("/upload")
def upload_file(file: UploadFile = File(...), claims: dict = Depends(verify_jwt)):
    team = claims.get("team")
    key = f"{team}/{file.filename}"  # store files under team folder
    try:
        ozone_s3.upload_fileobj(file.file, OZONE_BUCKET, key)
        return {"message": f"{file.filename} uploaded for team {team}"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# ---------------- Download File ----------------
@app.get("/download/{filename}")
def download_file(filename: str, claims: dict = Depends(verify_jwt)):
    team = claims.get("team")
    key = f"{team}/{filename}"  # only allow team folder access
    try:
        obj = ozone_s3.get_object(Bucket=OZONE_BUCKET, Key=key)
        return StreamingResponse(
            obj["Body"], media_type="application/octet-stream",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
    except Exception as e:
        raise HTTPException(status_code=404, detail=str(e))



=================================================================================================

1. **Admin Generates Token**

   python
   import jwt
   import datetime

   SECRET_KEY = "super-secret-key"  # only known to Admin + API

   def generate_team_token(team_name):
       payload = {
           "team": team_name,
           "exp": datetime.datetime.utcnow() + datetime.timedelta(days=7)  # expires in 7 days
       }
       token = jwt.encode(payload, SECRET_KEY, algorithm="HS256")
       return token

   print(generate_team_token("TeamA"))
   

   ðŸ‘‰ This will give you a token string like:

   ```
   eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
   ```

2. **API Validates Token**

   python
   from fastapi import FastAPI, Depends, HTTPException
   from fastapi.security import HTTPBearer
   import jwt

   app = FastAPI()
   security = HTTPBearer()
   SECRET_KEY = "super-secret-key"

   def verify_token(credentials = Depends(security)):
       token = credentials.credentials
       try:
           payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
           return payload  # contains "team": "TeamA"
       except jwt.ExpiredSignatureError:
           raise HTTPException(status_code=401, detail="Token expired")
       except jwt.InvalidTokenError:
           raise HTTPException(status_code=401, detail="Invalid token")

   @app.get("/data")
   def get_data(payload: dict = Depends(verify_token)):
       team = payload["team"]  # API now knows the team from token payload
       return {"msg": f"Hello {team}, here is your data"}



