#Batch Script to Mount NFS drive:::
1#
@echo off
setlocal enabledelayedexpansion

:: Define variables
set NFS_SERVER=d0124hostadroint.adrointster.com
set NFS_SHARE=/data/10/nfs/drive_location
set MOUNT_POINT=P:
set NETWORK_CHECK_IP=your_company_gateway_ip   :: Replace with an IP inside your organizationâ€™s network

:: Check if connected to organization network
ping -n 1 !NETWORK_CHECK_IP! >nul
if %errorlevel% neq 0 (
    echo Not connected to organization network. Exiting...
    exit /b
)

:: Enable NFS Client (First-time setup, requires admin rights)
dism /online /enable-feature /featurename:ServicesForNFS-Client /NoRestart

:: Set anonymous UID/GID for write permissions
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default" /v AnonymousUid /t REG_DWORD /d 0x3e8 /f
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default" /v AnonymousGid /t REG_DWORD /d 0x3e8 /f

:: Restart NFS Client Service
sc stop NfsClnt
sc start NfsClnt

:: Wait for service to start
timeout /t 5 /nobreak >nul

:: Mount NFS Share
mount -o nolock,rsize=1024,wsize=1024,mtype=hard,timeout=60 %NFS_SERVER%:%NFS_SHARE% %MOUNT_POINT%

if %errorlevel% equ 0 (
    echo Successfully mounted NFS at %MOUNT_POINT%
) else (
    echo Failed to mount NFS. Check network connection or permissions.
)

exit /b

2::
@echo off
setlocal

REM Log file location
set LOG_FILE=C:\NFS_Mount_Log.txt
echo [%date% %time%] Script started. >> %LOG_FILE%

REM Step 1: Check if connected to the organization network
echo Checking network connection... >> %LOG_FILE%
ping -n 1 your_organization_domain.com >nul
if %ERRORLEVEL% neq 0 (
    echo [%date% %time%] Not connected to the organization network. Exiting. >> %LOG_FILE%
    exit /b 0
)
echo [%date% %time%] Connected to the organization network. Proceeding... >> %LOG_FILE%

REM Step 2: Enable Services for NFS (if not already enabled)
echo Enabling Services for NFS... >> %LOG_FILE%
dism /online /enable-feature /featurename:ServicesForNFS-ClientOnly /all /norestart
if %ERRORLEVEL% neq 0 (
    echo [%date% %time%] Failed to enable Services for NFS. >> %LOG_FILE%
    exit /b 1
)

REM Step 3: Modify the registry to grant write permissions for the anonymous user
echo Modifying registry to grant write permissions... >> %LOG_FILE%
reg add "HKLM\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default" /v AnonymousUid /t REG_DWORD /d 0 /f
reg add "HKLM\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default" /v AnonymousGid /t REG_DWORD /d 0 /f
if %ERRORLEVEL% neq 0 (
    echo [%date% %time%] Failed to modify the registry. >> %LOG_FILE%
    exit /b 1
)

REM Step 4: Restart the NFS client
echo Restarting the NFS client... >> %LOG_FILE%
sc stop nfsclnt
sc start nfsclnt
if %ERRORLEVEL% neq 0 (
    echo [%date% %time%] Failed to restart the NFS client. >> %LOG_FILE%
    exit /b 1
)

REM Step 5: Mount the NFS share
echo Mounting the NFS share... >> %LOG_FILE%
set NFS_SERVER=d0124hostadroint.adrointster.com:/data/10/nfs/drive_location
set DRIVE_LETTER=P:

mount -o nolock,rsize=1024,wsize=1024,mtype=hard,timeout=60 %NFS_SERVER% %DRIVE_LETTER%
if %ERRORLEVEL% neq 0 (
    echo [%date% %time%] Failed to mount the NFS share. >> %LOG_FILE%
    exit /b 1
)

echo [%date% %time%] NFS share mounted successfully on %DRIVE_LETTER%. >> %LOG_FILE%
exit /b 0




========================
@echo off
setlocal

REM Log file location
set LOG_FILE=C:\NFS_Mount_Log.txt
echo [%date% %time%] Script started. >> %LOG_FILE%

REM Step 1: Get the current scientist's username
for /f "tokens=2 delims=\" %%A in ('whoami') do set USERNAME=%%A
echo [%date% %time%] Scientist username: %USERNAME% >> %LOG_FILE%

REM Step 2: Call the PowerShell script to fetch AnonymousUid and AnonymousGid
echo Calling API to fetch AnonymousUid and AnonymousGid... >> %LOG_FILE%
for /f "tokens=1,2 delims==" %%A in ('powershell -File "C:\Path\To\Get_AnonymousIds.ps1"') do (
    set %%A=%%B
)

REM Step 3: Check if the values were fetched successfully
if not defined AnonymousUid (
    echo [%date% %time%] Failed to fetch AnonymousUid from API. >> %LOG_FILE%
    exit /b 1
)
if not defined AnonymousGid (
    echo [%date% %time%] Failed to fetch AnonymousGid from API. >> %LOG_FILE%
    exit /b 1
)

echo [%date% %time%] AnonymousUid=%AnonymousUid%, AnonymousGid=%AnonymousGid% >> %LOG_FILE%

REM Step 4: Enable Services for NFS (if not already enabled)
echo Enabling Services for NFS... >> %LOG_FILE%
dism /online /enable-feature /featurename:ServicesForNFS-ClientOnly /all /norestart
if %ERRORLEVEL% neq 0 (
    echo [%date% %time%] Failed to enable Services for NFS. >> %LOG_FILE%
    exit /b 1
)

REM Step 5: Modify the registry to grant write permissions for the anonymous user
echo Modifying registry to grant write permissions... >> %LOG_FILE%
reg add "HKLM\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default" /v AnonymousUid /t REG_DWORD /d %AnonymousUid% /f
reg add "HKLM\SOFTWARE\Microsoft\ClientForNFS\CurrentVersion\Default" /v AnonymousGid /t REG_DWORD /d %AnonymousGid% /f
if %ERRORLEVEL% neq 0 (
    echo [%date% %time%] Failed to modify the registry. >> %LOG_FILE%
    exit /b 1
)

REM Step 6: Restart the NFS client
echo Restarting the NFS client... >> %LOG_FILE%
sc stop nfsclnt
sc start nfsclnt
if %ERRORLEVEL% neq 0 (
    echo [%date% %time%] Failed to restart the NFS client. >> %LOG_FILE%
    exit /b 1
)

REM Step 7: Mount the NFS share
echo Mounting the NFS share... >> %LOG_FILE%
set NFS_SERVER=d0124hostadroint.adrointster.com:/data/10/nfs/drive_location
set DRIVE_LETTER=P:

mount -o nolock,rsize=1024,wsize=1024,mtype=hard,timeout=60 %NFS_SERVER% %DRIVE_LETTER%
if %ERRORLEVEL% neq 0 (
    echo [%date% %time%] Failed to mount the NFS share. >> %LOG_FILE%
    exit /b 1
)

echo [%date% %time%] NFS share mounted successfully on %DRIVE_LETTER%. >> %LOG_FILE%
exit /b 0


===========
# Define the API endpoint and username
$apiUrl = "https://api.yourorganization.com/getUserDetails"
$username = $env:USERNAME

# Call the API
$response = Invoke-RestMethod -Uri "$apiUrl?username=$username" -Method Get

# Output the AnonymousUid and AnonymousGid
Write-Output "AnonymousUid=$($response.AnonymousUid)"
Write-Output "AnonymousGid=$($response.AnonymousGid)"




===============
@echo off
SETLOCAL EnableDelayedExpansion

:: Log file
set "logfile=api_script.log"

:: Clear the log file
echo Script started on %date% %time% > %logfile%
echo. >> %logfile%

:: API endpoint
set "api_url=https://jsonplaceholder.typicode.com/posts/1"
echo Calling API: %api_url% >> %logfile%

:: Temporary file to store API response
set "temp_file=response.tmp"

:: Use curl to call the API and save response
curl -s %api_url% > %temp_file%

:: Log API response
echo API Response: >> %logfile%
type %temp_file% >> %logfile%
echo. >> %logfile%

:: Extract userId and id
set "id1="
set "id2="

for /f "tokens=2 delims=:, " %%a in ('type %temp_file% ^| findstr /i "\"userId\""') do (
    set "id1=%%a"
)
for /f "tokens=2 delims=:, " %%b in ('type %temp_file% ^| findstr /i "\"id\""') do (
    set "id2=%%b"
)

:: Remove unwanted characters
set "id1=!id1:"=%!"
set "id1=!id1: =!"
set "id2=!id2:"=%!"
set "id2=!id2: =!"

:: Debug logging
echo DEBUG: Extracted userId (ID 1): "!id1!" >> %logfile%
echo DEBUG: Extracted id (ID 2): "!id2!" >> %logfile%

:: If extraction failed, log error
if "!id1!"=="" echo ERROR: userId not extracted! >> %logfile%
if "!id2!"=="" echo ERROR: id not extracted! >> %logfile%

:: Force log flush
timeout /t 1 >nul

:: Convert to numbers
set /a id1_num=!id1! 2>nul
set /a id2_num=!id2! 2>nul

:: Debug conversion
echo DEBUG: Converted userId: "!id1_num!" >> %logfile%
echo DEBUG: Converted id: "!id2_num!" >> %logfile%

:: Perform sum operation
set /a result=!id1_num! + !id2_num!
echo Sum of IDs: !result! >> %logfile%

:: Ensure script reaches end
echo DEBUG: Script reached the end. >> %logfile%

:: Cleanup
del %temp_file%

:: Display log file
type %logfile%
pause

ENDLOCAL